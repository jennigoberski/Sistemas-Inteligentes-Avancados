{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1cw5t0zElllZ2HgzB-pZ66aBjBdsC7LVO","timestamp":1685500913042}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"VYsEdRNVDuuK"},"source":["#CLASSIFICADORES\n","#Primeira parte será obter modelo classificador com a base Fertility\n","#1. Normalização / Balanceamento dos dados\n","#2. Determinação dos hiperparâmetros / Obter o modelo (treinar)\n","#3. Avaliar a acurácia do modelo\n","##################################\n","# EXEMPLO COM O ARQUIVO FERTILIY #\n","##################################"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2m5At10ZHWZC","executionInfo":{"status":"ok","timestamp":1682465357866,"user_tz":180,"elapsed":2760,"user":{"displayName":"Leandro Escobar","userId":"01186171446550901126"}},"outputId":"e1c8b28d-2a68-420b-9b3c-f0a83101a9ba"},"source":["#1, Avaliar se as classes estão balanceadas\n","import pandas as pd\n","dados = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/2023/fertility_Diagnosis.txt', sep = ',')\n","print('# Frequencia das classes (atributo Output)')\n","print(dados.Output.value_counts())\n","#Balancear os dados\n","from imblearn.over_sampling import SMOTE\n","#a) Segmentar os dados em atributos e classes\n","dados.classes = dados['Output'] #Somente a coluna output\n","dados.atributos = dados.drop(columns=['Output']) #Todas as colunas exceto Output\n","\n","#b) Construiu um objeto a partir do SMOTE e executar o método fit_resample\n","resampler = SMOTE() # Constroi o balanceador\n","#Executar o balanceamento\n","dados.atributos_b, dados.classes_b = resampler.fit_resample(dados.atributos, dados.classes)\n","\n","#c. Verficiar a frequencia das classes balanceadas\n","print('#### FREQUENCIA DAS CLASSES APÓS O BALANCEAMENTO ###')\n","from collections import Counter\n","class_count = Counter(dados.classes_b)\n","class_count\n","dados.columns #utilizar os rótulos das colunas"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["# Frequencia das classes (atributo Output)\n","N    88\n","O    12\n","Name: Output, dtype: int64\n","#### FREQUENCIA DAS CLASSES APÓS O BALANCEAMENTO ###\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-3-19647bf9f623>:9: UserWarning: Pandas doesn't allow columns to be created via a new attribute name - see https://pandas.pydata.org/pandas-docs/stable/indexing.html#attribute-access\n","  dados.classes = dados['Output'] #Somente a coluna output\n","<ipython-input-3-19647bf9f623>:10: UserWarning: Pandas doesn't allow columns to be created via a new attribute name - see https://pandas.pydata.org/pandas-docs/stable/indexing.html#attribute-access\n","  dados.atributos = dados.drop(columns=['Output']) #Todas as colunas exceto Output\n","<ipython-input-3-19647bf9f623>:15: UserWarning: Pandas doesn't allow columns to be created via a new attribute name - see https://pandas.pydata.org/pandas-docs/stable/indexing.html#attribute-access\n","  dados.atributos_b, dados.classes_b = resampler.fit_resample(dados.atributos, dados.classes)\n"]},{"output_type":"execute_result","data":{"text/plain":["Index(['Season', 'Age', 'Childish_diseases', 'Accident',\n","       'Surgical_intervention', 'High_fevers', 'alcohol_consumption',\n","       'Smoking', 'hours_sitting', 'Output'],\n","      dtype='object')"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"gnY4Epa0MP7t","executionInfo":{"status":"ok","timestamp":1682465362688,"user_tz":180,"elapsed":235,"user":{"displayName":"Leandro Escobar","userId":"01186171446550901126"}},"colab":{"base_uri":"https://localhost:8080/","height":522},"outputId":"68877e1f-8076-4a53-a91d-b44c937f9d0c"},"source":["#d. Integrar os dados em um objeto Data Frame\n","#d1. Converter os atributos que estão como ndArray em DataFrame\n","dados.atributos_b = pd.DataFrame(dados.atributos_b)\n","dados.atributos_b.colums=[]\n","dados.classes_b = pd.DataFrame(dados.classes_b)\n","\n","#resolver os rótulos das colunas\n","dados.columns[:-1] #todos os rótulos das colunas, exceto a última\n","dados.columns[-1]  #o último rótulo da lista de rótulos do objeto dados\n","\n","dados.atributos_b.columns=dados.columns[:-1]#atribui os rótulos (exceto do último) para o novo data frame\n","dados.classes_b.columns = [dados.columns[-1]] # atribui o último rótulo para o novo data frame\n","\n","#d2. Juntar os data frames\n","dados_b = dados.atributos_b.join(dados.classes_b, how = 'left')\n","dados_b"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-4-746f216c2ab1>:4: UserWarning: Pandas doesn't allow columns to be created via a new attribute name - see https://pandas.pydata.org/pandas-docs/stable/indexing.html#attribute-access\n","  dados.atributos_b.colums=[]\n"]},{"output_type":"execute_result","data":{"text/plain":["       Season       Age  Childish_diseases  Accident  Surgical_intervention  \\\n","0   -0.330000  0.690000                  0         1                      1   \n","1   -0.330000  0.940000                  1         0                      1   \n","2   -0.330000  0.500000                  1         0                      0   \n","3   -0.330000  0.750000                  0         1                      1   \n","4   -0.330000  0.670000                  1         1                      0   \n","..        ...       ...                ...       ...                    ...   \n","171  1.000000  0.670000                  0         0                      1   \n","172  0.892423  0.699634                  1         0                      1   \n","173  0.388596  0.794120                  1         0                      0   \n","174  0.610805  0.716471                  1         0                      1   \n","175 -0.493668  0.670000                  0         0                      1   \n","\n","     High_fevers  alcohol_consumption  Smoking  hours_sitting Output  \n","0              0             0.800000        0       0.880000      N  \n","1              0             0.800000        1       0.310000      O  \n","2              0             1.000000       -1       0.500000      N  \n","3              0             1.000000       -1       0.380000      N  \n","4              0             0.800000       -1       0.500000      O  \n","..           ...                  ...      ...            ...    ...  \n","171            0             0.600000        0       0.442845      O  \n","172            0             0.800000       -1       0.280507      O  \n","173            0             0.800000        1       0.347821      O  \n","174            0             0.716177       -1       0.414853      O  \n","175            0             0.600000        0       0.500000      O  \n","\n","[176 rows x 10 columns]"],"text/html":["\n","  <div id=\"df-cc3c41dd-7e5b-4c3c-88df-ad9619ca7c20\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Season</th>\n","      <th>Age</th>\n","      <th>Childish_diseases</th>\n","      <th>Accident</th>\n","      <th>Surgical_intervention</th>\n","      <th>High_fevers</th>\n","      <th>alcohol_consumption</th>\n","      <th>Smoking</th>\n","      <th>hours_sitting</th>\n","      <th>Output</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-0.330000</td>\n","      <td>0.690000</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0.800000</td>\n","      <td>0</td>\n","      <td>0.880000</td>\n","      <td>N</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>-0.330000</td>\n","      <td>0.940000</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0.800000</td>\n","      <td>1</td>\n","      <td>0.310000</td>\n","      <td>O</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-0.330000</td>\n","      <td>0.500000</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1.000000</td>\n","      <td>-1</td>\n","      <td>0.500000</td>\n","      <td>N</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>-0.330000</td>\n","      <td>0.750000</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1.000000</td>\n","      <td>-1</td>\n","      <td>0.380000</td>\n","      <td>N</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-0.330000</td>\n","      <td>0.670000</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.800000</td>\n","      <td>-1</td>\n","      <td>0.500000</td>\n","      <td>O</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>171</th>\n","      <td>1.000000</td>\n","      <td>0.670000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0.600000</td>\n","      <td>0</td>\n","      <td>0.442845</td>\n","      <td>O</td>\n","    </tr>\n","    <tr>\n","      <th>172</th>\n","      <td>0.892423</td>\n","      <td>0.699634</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0.800000</td>\n","      <td>-1</td>\n","      <td>0.280507</td>\n","      <td>O</td>\n","    </tr>\n","    <tr>\n","      <th>173</th>\n","      <td>0.388596</td>\n","      <td>0.794120</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.800000</td>\n","      <td>1</td>\n","      <td>0.347821</td>\n","      <td>O</td>\n","    </tr>\n","    <tr>\n","      <th>174</th>\n","      <td>0.610805</td>\n","      <td>0.716471</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0.716177</td>\n","      <td>-1</td>\n","      <td>0.414853</td>\n","      <td>O</td>\n","    </tr>\n","    <tr>\n","      <th>175</th>\n","      <td>-0.493668</td>\n","      <td>0.670000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0.600000</td>\n","      <td>0</td>\n","      <td>0.500000</td>\n","      <td>O</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>176 rows × 10 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cc3c41dd-7e5b-4c3c-88df-ad9619ca7c20')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-cc3c41dd-7e5b-4c3c-88df-ad9619ca7c20 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-cc3c41dd-7e5b-4c3c-88df-ad9619ca7c20');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"h6-0M1YTURzD","executionInfo":{"status":"ok","timestamp":1682467514840,"user_tz":180,"elapsed":11266,"user":{"displayName":"Leandro Escobar","userId":"01186171446550901126"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"f6f02254-952e-4da2-a4be-c37b4e8c2b96"},"source":["######################################\n","#    TREINAR O NOVO MODELO           #\n","######################################\n","#2. treinar o modelo\n","#2.1 Segmentar a base de entrada em dois objetos. Um com os atributos e outro com as classes\n","#.  Obs: Para o caso atual, esses segmentos já existem (dados.atributos_b, dados.classes_b)\n","\n","#2.2 Segmentar os dados em parte para treinamento e parte para testes (Hold Out {70/30})\n","import numpy as np\n","from pprint import pprint\n","from sklearn.model_selection import  train_test_split\n","Atr_train, Atr_test, Class_train, Class_test = train_test_split(dados.atributos_b, dados.classes_b, test_size = 0.3)\n","\n","#2.3 Treinar o modelo: Árvore de Decisão\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","\n","#2.4 (Indutor) Construir um objeto a partir do DecisionTreeClassifier\n","tree = DecisionTreeClassifier()\n","\n","#2.5 Determinar os hiperparâmetros ótimos para o modelo\n","#Gridsearch\n","\n","#Determinar as faixas de valores para cada hiperparametro\n","n_estimators = [int(x) for x in np.linspace(start=10, stop = 300, num = 10)]\n","criterion = ['gini','entropy']\n","min_samples_split = [int(x) for x in np.linspace(start=2, stop = 10, num = 3)]\n","max_depth = [int(x) for x in np.linspace(start=10, stop = 100, num = 10)]\n","max_features = ['auto', 'sqrt', 'log2']\n","\n","#Criar a grade de valores\n","rf_grid = {\n","    'n_estimators':n_estimators,\n","    'criterion': criterion,\n","    'min_samples_split': min_samples_split,\n","    'max_depth':max_depth,\n","    'max_features': max_features,\n","    'random_state': [42]\n","}\n","pprint(rf_grid)\n","\n","###### Rodar GridSearch (treinamento e avaliaçao da grade de hiperparâmetros)\n","from sklearn.model_selection import RandomizedSearchCV #A classe que permite a avaliação das diferentes combinações de hiperparâmetros, usando cross validation para testes\n","\n","rf = RandomForestClassifier()\n","rf_hyperparemeters = RandomizedSearchCV(\n","                                        estimator = rf, \n","                                        param_distributions = rf_grid,\n","                                        n_iter = 10,\n","                                        cv = 3,\n","                                        verbose = 1,\n","                                        random_state=42,\n","                                        n_jobs = -1)\n","\n","rf_hyperparemeters.fit(dados.atributos_b, dados.classes_b)\n","#Imprimir a melhor combinação de hiperparâmetros\n","pprint(rf_hyperparemeters.best_params_)\n","                                                    "],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'criterion': ['gini', 'entropy'],\n"," 'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],\n"," 'max_features': ['auto', 'sqrt', 'log2'],\n"," 'min_samples_split': [2, 6, 10],\n"," 'n_estimators': [10, 42, 74, 106, 138, 171, 203, 235, 267, 300],\n"," 'random_state': [42]}\n","Fitting 3 folds for each of 10 candidates, totalling 30 fits\n","{'criterion': 'gini',\n"," 'max_depth': 20,\n"," 'max_features': 'sqrt',\n"," 'min_samples_split': 2,\n"," 'n_estimators': 42,\n"," 'random_state': 42}\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_search.py:909: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  self.best_estimator_.fit(X, y, **fit_params)\n"]}]},{"cell_type":"code","metadata":{"id":"TYp2yljffK5G","executionInfo":{"status":"ok","timestamp":1682467713979,"user_tz":180,"elapsed":231,"user":{"displayName":"Leandro Escobar","userId":"01186171446550901126"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"169ebf0c-40e0-4b3f-b5aa-d5db3c35a73f"},"source":["#2.5 Treinar o modelo de ML\n","fertility_tree = tree.fit(Atr_train, Class_train)\n","# rf = RandomForestClassifier(\n","#                              criterion= 'entropy',\n","#                              max_depth = 50,\n","#                              max_features = 'sqrt',\n","#                              min_samples_split= 2,\n","#                              n_estimators = 138,\n","#                              random_state = 42)\n","\n","rf = RandomForestClassifier(**rf_hyperparemeters.best_params_)\n","fertility_rf = rf.fit(dados.atributos_b, dados.classes_b,)\n","\n","pprint(rf.get_params())\n","#2.6 Pretestar o modelos\n","Class_predict = fertility_rf.predict(Atr_test)#fertility_tree.predict(Atr_test)\n","Class_predict\n","\n","# Imprimir as classes reservadas para test lado a lado com as classes pervistas no prete\n","# print('##### COMPARATIVO CLASSES TESTE X CLASSES PEVISTAS')\n","# i = 0\n","# for i in range(0, len(Class_test)):\n","#   print(Class_test.iloc[i][0], ' - ', Class_predict[i])\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'bootstrap': True,\n"," 'ccp_alpha': 0.0,\n"," 'class_weight': None,\n"," 'criterion': 'gini',\n"," 'max_depth': 20,\n"," 'max_features': 'sqrt',\n"," 'max_leaf_nodes': None,\n"," 'max_samples': None,\n"," 'min_impurity_decrease': 0.0,\n"," 'min_samples_leaf': 1,\n"," 'min_samples_split': 2,\n"," 'min_weight_fraction_leaf': 0.0,\n"," 'n_estimators': 42,\n"," 'n_jobs': None,\n"," 'oob_score': False,\n"," 'random_state': 42,\n"," 'verbose': 0,\n"," 'warm_start': False}\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-10-16465defbfb2>:12: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  fertility_rf = rf.fit(dados.atributos_b, dados.classes_b,)\n"]},{"output_type":"execute_result","data":{"text/plain":["array(['O', 'O', 'O', 'N', 'O', 'N', 'N', 'O', 'N', 'O', 'O', 'N', 'N',\n","       'O', 'O', 'N', 'N', 'N', 'N', 'N', 'O', 'N', 'N', 'N', 'N', 'O',\n","       'O', 'O', 'N', 'N', 'N', 'N', 'N', 'O', 'N', 'N', 'O', 'N', 'O',\n","       'N', 'N', 'N', 'O', 'O', 'O', 'N', 'N', 'O', 'O', 'O', 'N', 'O',\n","       'N'], dtype=object)"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"zi4cVX7xdojW"},"source":["#Acurácia global do modelo\n","from sklearn import metrics\n","print('Acurácia Global (provisória):', metrics.accuracy_score(Class_test, Class_predict))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zM4vQVJwUTOx"},"source":["# MATRIZ DE CONTIGÊNCIA\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import  plot_confusion_matrix #para o gréfico\n","from sklearn.metrics import confusion_matrix\n","plot_confusion_matrix(fertility_tree, Atr_test, Class_test)\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2JcHtVmSfn5L"},"source":["# print(fertility_tree.classes_) #Retorna os rótulos das classes dentro do modelo\n","print(confusion_matrix(Class_test, Class_predict, labels=fertility_tree.classes_))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2fkw_3QEOmsZ","executionInfo":{"status":"ok","timestamp":1682468391088,"user_tz":180,"elapsed":918,"user":{"displayName":"Leandro Escobar","userId":"01186171446550901126"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"2eb17da8-c43f-4952-f418-bb8b58e4f3a9"},"source":["#TREINAMENTO E TESTES COM USO DO CROSS VALIDATION\n","#1. O treinamento dispensa o split de base\n","from sklearn.tree import DecisionTreeClassifier\n","\n","#2.4 (Indutor) Construir um objeto a partir do DecisionTreeClassifier\n","tree = DecisionTreeClassifier()\n","#2.5 Treinar o modelo de ML\n","fertility_tree_cross = tree.fit(dados.atributos_b, dados.classes_b)\n","\n","#Testar o modelo CROSS VALIDATION\n","from sklearn.model_selection import cross_validate\n","scoring=['precision_macro','recall_macro']\n","scores_cross = cross_validate(rf, dados.atributos_b,dados.classes_b,cv=10, scoring = scoring) #Rodar o cross validate da forma nativa\n","print('Matriz de sensibilidades:', scores_cross['test_precision_macro'])\n","print('Matriz de especificidades:', scores_cross['test_recall_macro'])\n","#Métricas finas: calcular as medias\n","\n","print('Especificidade:', scores_cross['test_precision_macro'].mean())#tn/tn+fp\n","print('Sensibilidade :', scores_cross['test_recall_macro'].mean())#tp/tp+fn\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:686: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:686: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:686: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:686: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:686: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:686: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:686: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:686: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n","/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:686: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n"]},{"output_type":"stream","name":"stdout","text":["Matriz de sensibilidades: [0.625      0.77777778 1.         0.875      1.         0.95\n"," 0.94444444 0.88194444 1.         0.88194444]\n","Matriz de especificidades: [0.61111111 0.77777778 1.         0.83333333 1.         0.94444444\n"," 0.94444444 0.88194444 1.         0.88194444]\n","Especificidade: 0.8936111111111111\n","Sensibilidade : 0.8875\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/sklearn/model_selection/_validation.py:686: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  estimator.fit(X_train, y_train, **fit_params)\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"ziZDO18g6GUL"},"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0fLZeir5g2KF"},"source":["#SALVAR O MODELO PARA USO POSTERIOR\n","from pickle import dump\n","dump(fertility_tree, open('fertility_tree_model.pkl', 'wb'))#Árvore treinada com split e testada com Holdout\n","dump(fertility_tree_cross,open('fertility_tree_cross_model.pkl', 'wb'))#Árvore treinada com full data e testada com cros validation\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"S6oYNrj_huko"},"source":["###### INFERIR A CLASSE A PARTIR DE UMA NOVA INSTANCIA\n","#Nova instância\n","novo_paciente = [[1,0.67,0,0,1,0,0.6,0,0.5]]\n","\n","#Abrir o modelo\n","from pickle import  load\n","fertility_model = load(open('/content/fertility_tree_model.pkl', 'rb'))\n","fertility_cross_model = load(open('/content/fertility_tree_cross_model.pkl', 'rb'))\n","print('Fertility:', fertility_model.predict_proba(novo_paciente))\n","print('Fertility cross', fertility_cross_model.predict_proba(novo_paciente))\n","# print(fertility_model.classes_)\n","# print(fertility_model.predict_proba(novo_paciente))\n","[[0.49 0.51]]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"i9EuoRL2c8V1"},"source":["import numpy as np\n","\n","n = [\n","     int(x) for x in np.linspace(start=200, stop=2000, num =10)\n","]\n","\n","\n","print(n)"],"execution_count":null,"outputs":[]}]}